<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="parse_8h" kind="file" language="C++">
    <compoundname>parse.h</compoundname>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <includedby refid="parse_8c" local="yes">parse.c</includedby>
    <invincdepgraph>
      <node id="3">
        <label>parse.c</label>
        <link refid="parse_8c"/>
      </node>
      <node id="1">
        <label>parse.h</label>
        <link refid="parse_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="parse_8h_1ae7e45a1b0f2ce3ff1c34eccdff425637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse</definition>
        <argsstring>(char *line)</argsstring>
        <name>parse</name>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Função parse do programa. </para>
        </briefdescription>
        <detaileddescription>
<para>Inicia-se um apontador de caracteres (delimitadores).</para>
<para>Posteriormente, através de um ciclo, inicia-se uma nova variável (um apontador de carateres (token)), com a condição de paragem quando esse token for NULL. A cada iteração o token é atualizado.</para>
<para>Através de condições if verifica-se o valor a devolver ao topo da pilha, se à partida, a string contiver apenas números é imediatamente devolvida, caso contrário, através da função &apos;strcmp&apos; verificar-se-à que valor/es terão que se devolver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha, onde a função parse atuará, e que já foi lida.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Não devolve nada (void). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parse.h" line="1" column="6" bodyfile="parse.c" bodystart="31" bodyend="113" declfile="parse.h" declline="1" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parse_8h_1ac73273fd0ffc555551899ca6df91dac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PUSH</definition>
        <argsstring>(long val)</argsstring>
        <name>PUSH</name>
        <param>
          <type>long</type>
          <declname>val</declname>
          <defname>val_i</defname>
        </param>
        <briefdescription>
<para>Função PUSH do programa. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que vai à Stack adicionar uma célula acima da última.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>val_i</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Não devolve nada (void). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parse.h" line="2" column="6" bodyfile="parse.c" bodystart="137" bodyend="141" declfile="parse.h" declline="2" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parse_8h_1a0fab6d113db36bd0d939be75e40fbc39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long POP</definition>
        <argsstring>()</argsstring>
        <name>POP</name>
        <briefdescription>
<para>Função POP do programa. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que vai à Stack tirar a última célula.</para>
<para><simplesect kind="return"><para>Um inteiro long, cujo resultado é o valor no topo da Stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parse.h" line="3" column="6" bodyfile="parse.c" bodystart="122" bodyend="126" declfile="parse.h" declline="3" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parse_8h_1aba79cb558dcc94742a2c64f7f2a19a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PRINT_STACK</definition>
        <argsstring>()</argsstring>
        <name>PRINT_STACK</name>
        <briefdescription>
<para>Função PRINT_STACK do programa. </para>
        </briefdescription>
        <detaileddescription>
<para>Inicia-se um ciclo for, onde uma variável é incializada também, a condição de paragem ocorre se a variável é maior que o topo da da Stack, a cada iteração incrementa-se a variável.</para>
<para>É imprimido o valor da Stack no índice da variável, de acordo com o seu valor a cada iteração.</para>
<para><simplesect kind="return"><para>Não devolve nada (void). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parse.h" line="4" column="6" bodyfile="parse.c" bodystart="155" bodyend="162" declfile="parse.h" declline="4" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse_8h_1ae7e45a1b0f2ce3ff1c34eccdff425637" kindref="member">parse</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line);</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse_8h_1ac73273fd0ffc555551899ca6df91dac7" kindref="member">PUSH</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="parse_8h_1a0fab6d113db36bd0d939be75e40fbc39" kindref="member">POP</ref>();</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse_8h_1aba79cb558dcc94742a2c64f7f2a19a4f" kindref="member">PRINT_STACK</ref>();</highlight></codeline>
    </programlisting>
    <location file="parse.h"/>
  </compounddef>
</doxygen>
